// This file was auto-generated by Fern from our API Definition.

package petstoreferndefapi

import (
	json "encoding/json"
	core "sdk/core"
)

type InvalidPetIdError struct {
	*core.APIError
}

func (i *InvalidPetIdError) UnmarshalJSON(data []byte) error {
	i.StatusCode = 400
	return nil
}

func (i *InvalidPetIdError) MarshalJSON() ([]byte, error) {
	return nil, nil
}

type InvalidPetInputError struct {
	*core.APIError
}

func (i *InvalidPetInputError) UnmarshalJSON(data []byte) error {
	i.StatusCode = 400
	return nil
}

func (i *InvalidPetInputError) MarshalJSON() ([]byte, error) {
	return nil, nil
}

type InvalidPetStatusError struct {
	*core.APIError
	Body PetStatus
}

func (i *InvalidPetStatusError) UnmarshalJSON(data []byte) error {
	var body PetStatus
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	i.StatusCode = 400
	i.Body = body
	return nil
}

func (i *InvalidPetStatusError) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.Body)
}

func (i *InvalidPetStatusError) Unwrap() error {
	return i.APIError
}

type InvalidTagError struct {
	*core.APIError
	Body *Tag
}

func (i *InvalidTagError) UnmarshalJSON(data []byte) error {
	var body *Tag
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	i.StatusCode = 400
	i.Body = body
	return nil
}

func (i *InvalidTagError) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.Body)
}

func (i *InvalidTagError) Unwrap() error {
	return i.APIError
}

type PetNotFoundError struct {
	*core.APIError
	Body *Pet
}

func (p *PetNotFoundError) UnmarshalJSON(data []byte) error {
	var body *Pet
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	p.StatusCode = 404
	p.Body = body
	return nil
}

func (p *PetNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(p.Body)
}

func (p *PetNotFoundError) Unwrap() error {
	return p.APIError
}

type InvalidOrderIdError struct {
	*core.APIError
}

func (i *InvalidOrderIdError) UnmarshalJSON(data []byte) error {
	i.StatusCode = 400
	return nil
}

func (i *InvalidOrderIdError) MarshalJSON() ([]byte, error) {
	return nil, nil
}

type InvalidOrderInputError struct {
	*core.APIError
}

func (i *InvalidOrderInputError) UnmarshalJSON(data []byte) error {
	i.StatusCode = 400
	return nil
}

func (i *InvalidOrderInputError) MarshalJSON() ([]byte, error) {
	return nil, nil
}

type OrderNotFoundError struct {
	*core.APIError
	Body *Order
}

func (o *OrderNotFoundError) UnmarshalJSON(data []byte) error {
	var body *Order
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	o.StatusCode = 404
	o.Body = body
	return nil
}

func (o *OrderNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(o.Body)
}

func (o *OrderNotFoundError) Unwrap() error {
	return o.APIError
}

type InvalidUsernameError struct {
	*core.APIError
}

func (i *InvalidUsernameError) UnmarshalJSON(data []byte) error {
	i.StatusCode = 400
	return nil
}

func (i *InvalidUsernameError) MarshalJSON() ([]byte, error) {
	return nil, nil
}

type InvalidUsernameOrPasswordError struct {
	*core.APIError
}

func (i *InvalidUsernameOrPasswordError) UnmarshalJSON(data []byte) error {
	i.StatusCode = 400
	return nil
}

func (i *InvalidUsernameOrPasswordError) MarshalJSON() ([]byte, error) {
	return nil, nil
}

type UserNotFoundError struct {
	*core.APIError
	Body *User
}

func (u *UserNotFoundError) UnmarshalJSON(data []byte) error {
	var body *User
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.StatusCode = 404
	u.Body = body
	return nil
}

func (u *UserNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

func (u *UserNotFoundError) Unwrap() error {
	return u.APIError
}
