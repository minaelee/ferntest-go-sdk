// This file was auto-generated by Fern from our API Definition.

package petstoreferndefapi

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/minaelee/ferntest-go-sdk/core"
)

type LoginUserRequest struct {
	// The user name for login
	Username *string `json:"-"`
	// The password for login in clear text
	Password *string `json:"-"`
}

type CreateUserRequest struct {
	Username  *string `json:"username,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateUsersWithListInputRequest = []*User

type UpdateUserRequest struct {
	Id        int     `json:"id"`
	Username  *string `json:"username,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpdateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateUserRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateUserRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type User struct {
	Id        *int    `json:"id,omitempty"`
	Username  *string `json:"username,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	// User Status
	UserStatus *int `json:"userStatus,omitempty"`

	_rawJSON json.RawMessage
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
